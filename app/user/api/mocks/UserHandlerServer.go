// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	api "todo-go-grpc/app/user/api"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// UserHandlerServer is an autogenerated mock type for the UserHandlerServer type
type UserHandlerServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *UserHandlerServer) Create(_a0 context.Context, _a1 *api.CreateReq) (*api.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.User
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateReq) *api.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.CreateReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *UserHandlerServer) Delete(_a0 context.Context, _a1 *api.DeleteReq) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *api.DeleteReq) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.DeleteReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *UserHandlerServer) Get(_a0 context.Context, _a1 *api.GetReq) (*api.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.User
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetReq) *api.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.GetReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *UserHandlerServer) Login(_a0 context.Context, _a1 *api.LoginReq) (*api.BasicUser, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.BasicUser
	if rf, ok := ret.Get(0).(func(context.Context, *api.LoginReq) *api.BasicUser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.BasicUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.LoginReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *UserHandlerServer) Update(_a0 context.Context, _a1 *api.UpdateReq) (*api.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.User
	if rf, ok := ret.Get(0).(func(context.Context, *api.UpdateReq) *api.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.UpdateReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUserHandlerServer provides a mock function with given fields:
func (_m *UserHandlerServer) mustEmbedUnimplementedUserHandlerServer() {
	_m.Called()
}

type mockConstructorTestingTNewUserHandlerServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserHandlerServer creates a new instance of UserHandlerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserHandlerServer(t mockConstructorTestingTNewUserHandlerServer) *UserHandlerServer {
	mock := &UserHandlerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
