// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	api "todo-go-grpc/app/user/api"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// UserHandlerClient is an autogenerated mock type for the UserHandlerClient type
type UserHandlerClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *UserHandlerClient) Create(ctx context.Context, in *api.CreateReq, opts ...grpc.CallOption) (*api.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.User
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateReq, ...grpc.CallOption) *api.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.CreateReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *UserHandlerClient) Delete(ctx context.Context, in *api.DeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *api.DeleteReq, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.DeleteReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *UserHandlerClient) Get(ctx context.Context, in *api.GetReq, opts ...grpc.CallOption) (*api.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.User
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetReq, ...grpc.CallOption) *api.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.GetReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *UserHandlerClient) Login(ctx context.Context, in *api.LoginReq, opts ...grpc.CallOption) (*api.BasicUser, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.BasicUser
	if rf, ok := ret.Get(0).(func(context.Context, *api.LoginReq, ...grpc.CallOption) *api.BasicUser); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.BasicUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.LoginReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *UserHandlerClient) Update(ctx context.Context, in *api.UpdateReq, opts ...grpc.CallOption) (*api.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.User
	if rf, ok := ret.Get(0).(func(context.Context, *api.UpdateReq, ...grpc.CallOption) *api.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.UpdateReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserHandlerClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserHandlerClient creates a new instance of UserHandlerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserHandlerClient(t mockConstructorTestingTNewUserHandlerClient) *UserHandlerClient {
	mock := &UserHandlerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
