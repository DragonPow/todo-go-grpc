// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "todo-go-grpc/app/task/domain"

	mock "github.com/stretchr/testify/mock"
)

// TagRepository is an autogenerated mock type for the TagRepository type
type TagRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, info
func (_m *TagRepository) Create(ctx context.Context, info *domain.Tag) (*domain.Tag, error) {
	ret := _m.Called(ctx, info)

	var r0 *domain.Tag
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Tag) *domain.Tag); ok {
		r0 = rf(ctx, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Tag) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TagRepository) Delete(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAll provides a mock function with given fields: ctx
func (_m *TagRepository) DeleteAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx
func (_m *TagRepository) FetchAll(ctx context.Context) ([]domain.Tag, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Tag
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Tag); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TagRepository) GetByID(ctx context.Context, id int32) (*domain.Tag, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Tag
	if rf, ok := ret.Get(0).(func(context.Context, int32) *domain.Tag); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, new_info
func (_m *TagRepository) Update(ctx context.Context, id int32, new_info *domain.Tag) (*domain.Tag, error) {
	ret := _m.Called(ctx, id, new_info)

	var r0 *domain.Tag
	if rf, ok := ret.Get(0).(func(context.Context, int32, *domain.Tag) *domain.Tag); ok {
		r0 = rf(ctx, id, new_info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, *domain.Tag) error); ok {
		r1 = rf(ctx, id, new_info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTagRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTagRepository creates a new instance of TagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTagRepository(t mockConstructorTestingTNewTagRepository) *TagRepository {
	mock := &TagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
