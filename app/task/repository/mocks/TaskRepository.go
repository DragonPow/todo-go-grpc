// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "todo-go-grpc/app/task/domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user_id, info
func (_m *TaskRepository) Create(ctx context.Context, user_id int32, info *domain.Task) (*domain.Task, error) {
	ret := _m.Called(ctx, user_id, info)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, int32, *domain.Task) *domain.Task); ok {
		r0 = rf(ctx, user_id, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, *domain.Task) error); ok {
		r1 = rf(ctx, user_id, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, ids
func (_m *TaskRepository) Delete(ctx context.Context, ids []int32) error {
	ret := _m.Called(ctx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int32) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, user_id, offset, number, conditions
func (_m *TaskRepository) Fetch(ctx context.Context, user_id int32, offset int32, number int32, conditions map[string]interface{}) ([]domain.Task, error) {
	ret := _m.Called(ctx, user_id, offset, number, conditions)

	var r0 []domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, int32, map[string]interface{}) []domain.Task); ok {
		r0 = rf(ctx, user_id, offset, number, conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, int32, map[string]interface{}) error); ok {
		r1 = rf(ctx, user_id, offset, number, conditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TaskRepository) GetByID(ctx context.Context, id int32) (*domain.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, int32) *domain.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: ctx, user_id
func (_m *TaskRepository) GetByUserId(ctx context.Context, user_id int32) ([]int32, error) {
	ret := _m.Called(ctx, user_id)

	var r0 []int32
	if rf, ok := ret.Get(0).(func(context.Context, int32) []int32); ok {
		r0 = rf(ctx, user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExists provides a mock function with given fields: ctx, id
func (_m *TaskRepository) IsExists(ctx context.Context, id int32) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int32) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, new_info, tags_add, tags_remove
func (_m *TaskRepository) Update(ctx context.Context, id int32, new_info *domain.Task, tags_add []int32, tags_remove []int32) (*domain.Task, error) {
	ret := _m.Called(ctx, id, new_info, tags_add, tags_remove)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, int32, *domain.Task, []int32, []int32) *domain.Task); ok {
		r0 = rf(ctx, id, new_info, tags_add, tags_remove)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, *domain.Task, []int32, []int32) error); ok {
		r1 = rf(ctx, id, new_info, tags_add, tags_remove)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskRepository(t mockConstructorTestingTNewTaskRepository) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
