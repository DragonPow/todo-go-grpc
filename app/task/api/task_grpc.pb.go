// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: app/task/api/task.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskHandlerClient is the client API for TaskHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskHandlerClient interface {
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListTask, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Task, error)
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*Task, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Task, error)
	DeleteMultiple(ctx context.Context, in *DeleteMultipleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskHandlerClient(cc grpc.ClientConnInterface) TaskHandlerClient {
	return &taskHandlerClient{cc}
}

func (c *taskHandlerClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListTask, error) {
	out := new(ListTask)
	err := c.cc.Invoke(ctx, "/api.task.TaskHandler/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/api.task.TaskHandler/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/api.task.TaskHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/api.task.TaskHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) DeleteMultiple(ctx context.Context, in *DeleteMultipleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.task.TaskHandler/DeleteMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) DeleteAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.task.TaskHandler/DeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskHandlerServer is the server API for TaskHandler service.
// All implementations must embed UnimplementedTaskHandlerServer
// for forward compatibility
type TaskHandlerServer interface {
	List(context.Context, *ListReq) (*ListTask, error)
	Get(context.Context, *GetReq) (*Task, error)
	Create(context.Context, *CreateReq) (*Task, error)
	Update(context.Context, *UpdateReq) (*Task, error)
	DeleteMultiple(context.Context, *DeleteMultipleReq) (*emptypb.Empty, error)
	DeleteAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedTaskHandlerServer()
}

// UnimplementedTaskHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedTaskHandlerServer struct {
}

func (UnimplementedTaskHandlerServer) List(context.Context, *ListReq) (*ListTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTaskHandlerServer) Get(context.Context, *GetReq) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTaskHandlerServer) Create(context.Context, *CreateReq) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTaskHandlerServer) Update(context.Context, *UpdateReq) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTaskHandlerServer) DeleteMultiple(context.Context, *DeleteMultipleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMultiple not implemented")
}
func (UnimplementedTaskHandlerServer) DeleteAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedTaskHandlerServer) mustEmbedUnimplementedTaskHandlerServer() {}

// UnsafeTaskHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskHandlerServer will
// result in compilation errors.
type UnsafeTaskHandlerServer interface {
	mustEmbedUnimplementedTaskHandlerServer()
}

func RegisterTaskHandlerServer(s grpc.ServiceRegistrar, srv TaskHandlerServer) {
	s.RegisterService(&TaskHandler_ServiceDesc, srv)
}

func _TaskHandler_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.task.TaskHandler/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.task.TaskHandler/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.task.TaskHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.task.TaskHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_DeleteMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMultipleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).DeleteMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.task.TaskHandler/DeleteMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).DeleteMultiple(ctx, req.(*DeleteMultipleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.task.TaskHandler/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).DeleteAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskHandler_ServiceDesc is the grpc.ServiceDesc for TaskHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.task.TaskHandler",
	HandlerType: (*TaskHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TaskHandler_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TaskHandler_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TaskHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TaskHandler_Update_Handler,
		},
		{
			MethodName: "DeleteMultiple",
			Handler:    _TaskHandler_DeleteMultiple_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _TaskHandler_DeleteAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/task/api/task.proto",
}
