// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: app/tag/delivery/grpc/tag.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagHandlerClient is the client API for TagHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagHandlerClient interface {
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListTag, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Tag, error)
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*Tag, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Tag, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tagHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewTagHandlerClient(cc grpc.ClientConnInterface) TagHandlerClient {
	return &tagHandlerClient{cc}
}

func (c *tagHandlerClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListTag, error) {
	out := new(ListTag)
	err := c.cc.Invoke(ctx, "/grpc.tag.TagHandler/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagHandlerClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/grpc.tag.TagHandler/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagHandlerClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/grpc.tag.TagHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagHandlerClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/grpc.tag.TagHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagHandlerClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.tag.TagHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagHandlerServer is the server API for TagHandler service.
// All implementations must embed UnimplementedTagHandlerServer
// for forward compatibility
type TagHandlerServer interface {
	List(context.Context, *ListReq) (*ListTag, error)
	Get(context.Context, *GetReq) (*Tag, error)
	Create(context.Context, *CreateReq) (*Tag, error)
	Update(context.Context, *UpdateReq) (*Tag, error)
	Delete(context.Context, *DeleteReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedTagHandlerServer()
}

// UnimplementedTagHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedTagHandlerServer struct {
}

func (UnimplementedTagHandlerServer) List(context.Context, *ListReq) (*ListTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTagHandlerServer) Get(context.Context, *GetReq) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTagHandlerServer) Create(context.Context, *CreateReq) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTagHandlerServer) Update(context.Context, *UpdateReq) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTagHandlerServer) Delete(context.Context, *DeleteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTagHandlerServer) mustEmbedUnimplementedTagHandlerServer() {}

// UnsafeTagHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagHandlerServer will
// result in compilation errors.
type UnsafeTagHandlerServer interface {
	mustEmbedUnimplementedTagHandlerServer()
}

func RegisterTagHandlerServer(s grpc.ServiceRegistrar, srv TagHandlerServer) {
	s.RegisterService(&TagHandler_ServiceDesc, srv)
}

func _TagHandler_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagHandlerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tag.TagHandler/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagHandlerServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagHandler_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagHandlerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tag.TagHandler/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagHandlerServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tag.TagHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagHandlerServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tag.TagHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagHandlerServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tag.TagHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagHandlerServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TagHandler_ServiceDesc is the grpc.ServiceDesc for TagHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.tag.TagHandler",
	HandlerType: (*TagHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TagHandler_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TagHandler_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TagHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TagHandler_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TagHandler_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/tag/delivery/grpc/tag.proto",
}
